추상클래스
	틀만 잡아두는 것
인터페이스 - 모든 메소드가 추상인 것은 인터페이스라는 새로운 타입으로 바꾸어서 implement해서 구현하도록 함. -> 자바에서는 extends를 한번만 할수 있기 때문에
	개발코드와 객체가 서로 통신하는 접점
	개발코드는 인터페이스의 메소드만 알고 있으면 OK
	개발 코드가 객체에 종속되지 않게 -> 객체 교체할 수 있도록 하는 역할
자바에서는 extends를 한번만 할 수 있다.
클래스의 모든 메소드가 추상일 경우 -> 인터페이스로 바꾸어 버림(다른 클래스를 상속하기 위해서) -> 인터페이스를 구현하는 것과 다른 클래스를 상속받는 것은 동시에 일어날 수 있기 때문에 이런식으로 구현한다.
인터페이스 - 계약관계라고도 함(Contract)
public interface 인터페이스명 {...}
인터페이스는 상수 필드만 선언 가능
인터페이스에 선언된 필드는 모두 public static final
상수명은 대문자로 작성
선언과 동시에 초기값 지정

interface 인터페이스명{
	//상수
	타입 상수명 = 값;
	//추상 메소드
	타입 메소드명 (매개변수,...);
	//디폴트 메소드
	default 리턴타입 메소드명(매개변수,...){...}
	//정적 메소드
	static 리턴타입 메소드명(매개변수){...}
}
자바 8에서 부터는 인터페이스에서 default와 static을 가진 디폴트 메소드와 정적 메소드를 가질 수 있도록 함
원래는 추상 메소드만 가질 수 있었음.

public class 구현 클래스명 implements 인터페이스명 {
	//인터페이스에 선언된 추상 메소드의 실체 메소드 선언
}
메소드의 선언부가 정확히 일치해야함.
인터페이스의 모든 추상 메소드를 재정의하는 실체 메소드를 작성해야한다.
*만약 일부만 재정의할 경우 정의하지 않은 인터페이스의 추상메소드는 추상 클래스로 선언 abstract키워드를 붙여야함.

inner class
인스턴스 변수일 경우 중첩(inner) 클래스에서 부르기 위해서는 final을 붙여서 해야한다. 하지만, 자바 8이후에서는 알아서 호환됨
