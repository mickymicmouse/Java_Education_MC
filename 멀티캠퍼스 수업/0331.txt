do-while = do 부분 실행 후 while 부분 실행

for문의 label을 통해 바깥 for문 break가능
label: for(){}
break label

데이터 타입
기본 타입 (primitive type)
char	
byte	short	int	long
float	double
boolean

참조 타입 (preference type)
배열
열거
클래스
인터페이스


1절 - 데이터 타입 분류
2절 - 메모리 사용 영역
3절 - 참조 변수의 ==, !=연산
4절 - null 과 nullpointerexception
5절 - String 타입
6절 - 배열 타입
7절 - 열거 타입

기본 타입 변수 - 실제 값을 변수 안에 저장(하나의 값을 저장) 2 or 'A'(문자)
참조 타입 변수 - 주소를 통해 객체를 참조 (여러개의 값을 저장) [2,3] or 'AB'(문자열)
즉, 문자열은 참조 타입=String
String은 하나의 값이지만 주소가 들어가 있는 것이다!!
자바에서 ""은 문자열(String)을 지칭, ''은 문자(char)를 지칭한다.

**** 단, 파이썬에서는 참조 타입 변수만을 사용하는데, 이는 파이썬에서 사전 변수 타입 정의를 하지 않기 때문에 변수의 값을 저장하는 것이 아닌 객체의 주소를 저장하기 때문이다. 


비교 연산 (==, !=)
기본 변수는 값을 비교하지만,
참조 변수는 저장되어 있는 주소를 비교하므로, 값이 동일하더라도 참조하는 주소가 다르면 false로 return됨.
즉 값을 비교하기 위해서는 다른 방법을 사용해야 하는데, 이는 equal로 비교해야 함.

****단, String의 경우는 주소값을 비교하긴 하지만, 비교 연산을 해도 값을 비교함
ex)		String lee = "Lee";
		String name = "Lee";
		동일함
****그렇지만 다른 참조 변수의 경우 값이 동일하더라도, 다르다고 인식됨.
ex)		int [] a = {1,2,3};
		int [] b = {1,2,3};
		다름

null = 아무것도 참조주소에 저장되어 있는 것이 없을 경우
아무것도 없는 곳을 가리킬 경우 = nullpointerexception

프로그래밍 방식
객체 (기능+데이터) 	= 객체 지향 프로그래밍(객체 간의 관계를 이용해서 프로그래밍)
기능 		= 시스템 프로그래밍
데이터 		= 데이터베이스

객체 지향 프로그래밍
부품 객체 (API) 를 만들고 이를 조합해서 완성된 프로그램을 만드는 것

객체 
1. 물리적으로 존재하는 것(자동차, 책, 사람)
2. 추상적인 것(날씨, 회사) 중에서 자신의 속성(형용사)과 동작(동사)을 가지는 것
3. 객체는 필드(속성)와 메소드(동작)로 구성된 자바 객체로 모델링

객체 간의 관계
집합 관계 - 완성품과 부품의 관계 (자동차 - 타이어, 엔진, 핸들)
사용 관계 - 객체가 다른 객체를 사용하는 관계 (사용자 - 자동차)
상속 관계 - 종류 객체와 구체적인 사물 관계 (기계 - 자동차, 청소기, 세탁기)

캡슐화
객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것
외부의 접근으로 인한 파괴를 막기 위해
접근 제한자(Access Modifier)를 사용

상속
다형성

객체와 클래스
현실 = 설계도 -> 객체
자바 = 클래스 -> 객체
클래스에는 객체를 생성하기 위한 필드와 메소드가 정의되어 있음
클래스로부터 만들어진 객체를 해당 클래스의 인스턴스라고 부름
즉, 객체 = 인스턴스
하나의 클래스에서 여러개의 인스턴스가 생성 가능
객체(인스턴스)를 생성 = 인스턴스화 했다. = 선언을 해서 불러왔다.

자기 책임성의 원칙에 따라 클래스는 자기 할일만 함.
클래스 이름 첫글자는 대문자로 생성하는 것을 원칙으로 함
.java = 소스 파일
.class = 소스 파일을 컴파일 한 파일

객체 생성 
변수에 객체의 주소 저장 (참조 타입 변수) 
클래스 변수 = new 클래스();
ex) 	클래스 이름 = support, 변수 이름 = abc
	support abc = new support();

클래스의 구성 멤버
필드(field) - 데이터가 저장되는 곳
생성자(constructor) - 객체 생성시 초기화 담당 역할
메소드(method) - 객체의 동작에 해당하는 실행 블록

메소드
리턴타입		메소드 이름	(매개변수 선언, ...)	{ 메소드 실행 블록 }
결과 타입 표시		필요한 데이터 선언










