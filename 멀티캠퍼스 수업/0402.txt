**** 상속
적절한 클래스를 관리하기 위해 상속이라는 개념을 도입
상위 객체의 필드와 메소드를 하위 객체에게 물려주는 행위가 상속
하위 객체는 상위 객체를 확장해서 추가적인 필드와 메소드를 가질 수 있다.
상속 대상 = 필드와 메소드
상위 객체를 재사용해서 하위 객체를 빨리 개발 가능
반복된 코드의 중복을 줄임
유지보수의 편리성
객체의 다형성 구현
실제 사회가 계층적 구조를 가지고 있기 때문에 사용


**** 다형성 (polymorphism)
한가지 모습으로 여러가지 다양한 역할을 하는 것
부모 타입에는 모든 자식 객체가 대입
인터페이스 타입에는 모든 구현 객체가 대입
효과 - 객체를 부품화, 유지보수 용이
인스턴스 레벨
메소드 레벨

파라미터 리스트(추가정보)
파라미터를 통해서 메소드 내부에서 다양하게 동작하므로, 매개변수를 변화시켜서 사용
오버로딩

**** 클래스 선언
파일이름과 클래스이름은 동일하게 해야함.
하나의 파일에 두 개 이상의 클래스도 선언 가능하지만, 보통 하나만 함.
컴파일시 두개의 .class파일 생성
두개일 경우 public 이 붙은 class 이름이 파일 이름이 됨.
보통 한 파일에 2개의 클래스를 생성하기 위해서는 inner class로 생성

**** new 연산자
new 클래스이름();
new - 객체 생성 역할 후 객체 생성 번지를 리턴
클래스이름() - 생성자(클래스가 가지고 있는 필드를 초기화)를 호출하는 코드
생성된 객체는 힙 메모리에 저장됨.

**** static (클래스 변수)
static이 있을 경우, 인스턴스가 생성되지 않아도 사용 가능
private String name -> static 이 붙은 함수에서는 사용 불가, static이 없는 함수에서는 사용 가능 
private static String firstname -> static 함수 혹은 static이 없는 함수에서 객체 생성 없이 사용 가능

자바의 경우 제일 꼭대기에 하나의 오브젝트를 두고 다른 모든 클래스가 상속 - 단일 상속
자바에서 제일 지켜져야 할 사항이 최상위 오브젝트 클래스에 존재








