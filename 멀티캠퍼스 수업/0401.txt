실행 클래스 - 메인이 포함
서비스 클래스 - 메소드가 포함
메소드 이름 - 이름
메소드 입력 - 매개변수
메소드 출력 - 리턴 타입
메소드 접근 - 접근 제한자(access modifier)

public(접근 제한자) void(함수 리턴 타입) 함수이름(함수이름)
boolean - false가 기본값으로 설정되는게 보통임.

배열을 사용하기 위해서는 배열의 크기와 타입을 설정해야 함
new - 참조 타입을 만드는 키워드
ex) int[] 변수 이름 = new int[배열의 크기]; //배열을 0 으로 초기화 할 경우
ex) int[] 변수 이름 = {1,2,3}; // 초기값을 넣어줄 경우
ex) 변수이름[0]=4; //배열에 값을 넣을 경우


배열 변수는 참조변수 - 배열이 생성되기 전에 null로 초기화 가능(처음에 배열의 크기를 설정하지 않기 위해)
타입[] 변수 = null; 
배열 생성 3가지
1. 변수선언과 동시에 값 목록 대입
ex) 	int[] name = {1,2,3,4};
2. 변수 선언 후 값 목록 대입
ex) 	int[] name;
	name = new int[]{1,2,3,4};
3. 변수 사이즈만 선언
ex) 	int[] name = new int[10];

****자바의 자료구조
클래스 - 필드, 메소드, 생성자로 구성
스태틱(static) - 필드에서 선언된 변수 (클래스(전역)변수), 정적 멤버변수 (static이 붙은 자료형)가 저장되는 공간 -> 이를 통해 클래스 어디서나 사용가능, 하지만 너무 많을 경우 메모리를 많이 잡아먹는 문제가 있음.
스택(stack) - 메소드 내에서 선언된 변수(지역변수)가 저장되는 공간 -> 참조형의 주소값 혹은 원시형 데이터 타입의 실제 값이 저장됨.
힙(heap) - 메소드 내에서 선언된 변수(지역변수)가 저장되는 공간 -> 참조형의 데이터타입의 실제 값, 객체 혹은 배열이 저장되는 공간
****

2차원 배열
ex) 	int[][] array = new int[2][3];
향상된 for문
for(int i : 배열) -> 배열 내부를 돌면서 실행(i = index가 됨) like python

열거 타입 - 한정된 값을 갖는 데이터 타입(enum)
ex) 요일, 계절
enum 사용
Week today = null;
Week today = Week.SUNDAY;
today == Week.SUNDAY -> True
같은 객체를 참조하기 때문에 가능하다.

****About 배열
- 배열의 사용이유 
반복되는 값들을 저장해서 사용하기 위함
- 배열 선언 방법 
int[] array = new int[5];
- 배열 초기화 방법 
int[] array = null;
- 배열에 값 할당한 뒤 변경
int [] array = {1,2,3};
array[2]=5;
- 배열에서 알아야될 2가지
인덱스가 있다.
자료크기가 고정된다.
- 배열 전체 조회하기
for문 사용해서 실행해보기
****
내부 클래스 함수 불러오기
내부 클래스의 메소드를 호출할 때도 마찬가지로 현재 클래스를 객체로 생성한 뒤 메소드를 불러와야 한다.
함수에 static을 쓸 경우, 전역변수로 취급되기 때문에, 내부의 함수를 객체 생성하지 않아도 실행이 가능하다.
****

생성자 - 클래스에 전달받을 데이터의 형태를 선언하고, 각 변수를 전역변수(필드에 해당하는 변수)에 매칭(초기화)시킨다.
이때, 해당 생성자에서 선언한 변수의 이름과 필드 변수의 이름은 상관없지만,
하지만 같은 변수를 사용하기 위해서는 this.sex(필드의 변수)=sex(생성자의 변수)or this.name=name 이런식으로 구성해준다. ***
해당하는 클래스에서 꼭 필요한 변수를 초기화 하는 역할
생성자의 선언을 생략할 경우, 기본 생성자를 자동으로 생성해준다.

****

데이터만 존재하는 클래스가 있다.
이는 Value Object(VO)라고 한다.
Data Transfer Object(DTO)라고 부르기도 함.
****
캡슐화
public -> private
외부 클래스에서 변수를 변경할 수 없도록 하기 위해서 private를 사용
메소드를 통해 접근하게 하기.
정보 은닉이라고 함

****
값을 직접 집어 넣는 것은 primitive의 특징
생성자를 통해 값을 전달하는 것은 참조형의 특징
String은 둘다 가능하지만, 다른 방법으로 값을 전달 받았을 경우 ==로 비교 했을 때 다르다고 나옴.
하지만 같은 방법으로 값을 전달 받으면 같다고 나옴!!

인스턴스의 특정값의 동등 비교는 equals라는 메소드를 사용함.
이유는, 그 변수에 들어가는 값이 실제값이 아니라 주소값이기 때문에 한단계를 더 거치는 작업이 필요

숫자에 +""를 해주면 String타입으로 변환됨
